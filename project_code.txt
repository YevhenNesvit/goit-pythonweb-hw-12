import pytest
from httpx import AsyncClient
from app.main import app

@pytest.mark.asyncio
async def test_create_contact(async_client, token):
    # Get the actual token
    token_value = token
    
    # Directly use async_client for the post request
    response = await async_client.post(
        "/contacts/",
        json={
            "first_name": "John",
            "last_name": "Doe",
            "email": "john.doe@example.com",
            "phone": "1234567890",
            "birthday": "1990-01-01"
        },
        headers={"Authorization": f"Bearer {token_value}"}
    )
    assert response.status_code == 201
import pytest
from httpx import AsyncClient
from app.main import app

@pytest.mark.asyncio
async def test_register_user():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.post("/register", json={
            "email": "new@example.com",
            "password": "password"
        })
        assert response.status_code == 201
        data = response.json()
        assert data["email"] == "new@example.com"
import pytest
import pytest_asyncio
from httpx import AsyncClient
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.database import Base, get_db
from app.main import app
from app.models.user import User, UserRole

SQLALCHEMY_DATABASE_URL = "postgresql://postgres:1011@localhost:5432/contacts"

engine = create_engine(
    SQLALCHEMY_DATABASE_URL
)
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

@pytest.fixture(scope="function")
def db():
    Base.metadata.drop_all(bind=engine)
    Base.metadata.create_all(bind=engine)
    db = TestingSessionLocal()
    try:
        yield db
    finally:
        db.close()
        Base.metadata.drop_all(bind=engine)

@pytest_asyncio.fixture(autouse=True)
async def clear_db():
    Base.metadata.drop_all(bind=engine)  # Видаляємо всі таблиці
    Base.metadata.create_all(bind=engine)  # Створюємо заново в SQLite
    yield
    Base.metadata.drop_all(bind=engine)  # Прибираємо після тестів

@pytest.fixture(scope="function")
def client(db):
    def override_get_db():
        try:
            yield db
        finally:
            db.close()
    app.dependency_overrides[get_db] = override_get_db
    yield TestClient(app)
    app.dependency_overrides.clear()

@pytest.fixture
def test_user(db):
    user_data = {
        "email": "test@example.com",
        "password": "password",
        "role": UserRole.USER
    }
    user = User(
        email=user_data["email"],
        hashed_password=User.get_password_hash(user_data["password"]),
        is_verified=True,
        role=user_data["role"]
    )
    db.add(user)
    db.commit()  # Ensure async commit if using async db session
    db.refresh(user)  # Ensure async refresh
    return user


@pytest_asyncio.fixture
async def async_client():
    async with AsyncClient(base_url="http://test") as ac:
        yield ac

@pytest_asyncio.fixture
async def token(test_user):
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.post(
            "/token",
            data={"username": test_user.email, "password": "password"}
        )
        return response.json()["access_token"]


@pytest.mark.asyncio
async def test_register_user():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.post("/register", json={
            "email": "new@example.com",
            "password": "password"
        })
        assert response.status_code == 201
from app.repositories.user_repo import UserRepository
from app.repositories.contact_repo import ContactRepository
from app.schemas.user import UserCreate
from app.models.user import UserRole

def test_create_user(db):
    repo = UserRepository()
    user_data = {
        "email": "test@example.com",
        "password": "password",
        "role": UserRole.USER
    }
    verification_token = "test_token"

    # Створюємо об'єкт UserCreate (якщо у вас є така схема)
    # Імпортуємо схему, якщо вона є
    user_create = UserCreate(**user_data)

    # Викликаємо метод create_user з правильними аргументами
    user = repo.create_user(db, user_create, verification_token)

    # Перевіряємо результати
    assert user.email == "test@example.com"
    assert user.verification_token == verification_token

from app.repositories.contact_repo import ContactRepository
from app.schemas.contact import ContactCreate
import pytest

@pytest.mark.asyncio
async def test_create_contact_repo(db, test_user):
    actual_user = test_user
    repo = ContactRepository()
    contact_data = ContactCreate(
        first_name="John",
        last_name="Doe",
        email="john.doe@example.com",
        phone="1234567890",
        birthday="1990-01-01"
    )
    contact = repo.create(db, contact_data, actual_user)
